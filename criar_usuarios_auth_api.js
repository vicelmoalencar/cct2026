/**
 * ============================================================================
 * Script Node.js: Criar Usu√°rios no Supabase Auth via API Admin
 * ============================================================================
 * Este script cria contas de autentica√ß√£o para todos os usu√°rios da tabela
 * certificates usando a API Admin do Supabase (mais segura que SQL direto)
 * ============================================================================
 */

const { createClient } = require('@supabase/supabase-js')

// ============================================================================
// CONFIGURA√á√ÉO
// ============================================================================
const SUPABASE_URL = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL'
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 'YOUR_SERVICE_ROLE_KEY'

// IMPORTANTE: Use a SERVICE ROLE KEY, n√£o a ANON KEY
// A Service Role Key tem permiss√µes para criar usu√°rios via API Admin

const DEFAULT_PASSWORD = '123456' // Senha tempor√°ria padr√£o

// ============================================================================
// INICIALIZAR SUPABASE CLIENT
// ============================================================================
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

// ============================================================================
// FUN√á√ÉO PRINCIPAL
// ============================================================================
async function criarUsuariosDosCertificados() {
  console.log('üöÄ Iniciando cria√ß√£o de usu√°rios...')
  console.log('üìß Senha padr√£o:', DEFAULT_PASSWORD)
  console.log('')

  try {
    // 1. Buscar emails √∫nicos da tabela certificates
    console.log('üìä Buscando emails √∫nicos da tabela certificates...')
    const { data: certificates, error: certError } = await supabase
      .from('certificates')
      .select('user_email, user_name')
      .not('user_email', 'is', null)
      .neq('user_email', '')
      .like('user_email', '%@%')

    if (certError) {
      throw new Error(`Erro ao buscar certificados: ${certError.message}`)
    }

    // Obter emails √∫nicos
    const uniqueUsers = {}
    certificates.forEach(cert => {
      if (!uniqueUsers[cert.user_email]) {
        uniqueUsers[cert.user_email] = cert.user_name || 'Aluno'
      }
    })

    const emails = Object.keys(uniqueUsers)
    console.log(`‚úÖ Encontrados ${emails.length} emails √∫nicos`)
    console.log('')

    // 2. Buscar usu√°rios que j√° existem no Auth
    console.log('üîç Verificando usu√°rios existentes...')
    const { data: existingUsers, error: authError } = await supabase.auth.admin.listUsers()
    
    if (authError) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel listar usu√°rios existentes:', authError.message)
      console.log('   Continuando mesmo assim...')
    }

    const existingEmails = new Set(
      existingUsers?.users?.map(u => u.email) || []
    )

    console.log(`‚úÖ ${existingEmails.size} usu√°rios j√° existem no Auth`)
    console.log('')

    // 3. Filtrar emails que ainda n√£o t√™m conta
    const emailsToCreate = emails.filter(email => !existingEmails.has(email))
    
    console.log(`üìù ${emailsToCreate.length} usu√°rios precisam ser criados`)
    console.log('')

    if (emailsToCreate.length === 0) {
      console.log('‚úÖ Todos os usu√°rios j√° possuem conta!')
      return
    }

    // 4. Criar usu√°rios um por um
    let created = 0
    let errors = 0
    let skipped = 0

    console.log('‚è≥ Criando usu√°rios...')
    console.log('')

    for (let i = 0; i < emailsToCreate.length; i++) {
      const email = emailsToCreate[i]
      const name = uniqueUsers[email]

      try {
        // Criar usu√°rio via API Admin
        const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
          email: email,
          password: DEFAULT_PASSWORD,
          email_confirm: true, // Email j√° confirmado
          user_metadata: {
            full_name: name,
            name: name
          }
        })

        if (createError) {
          // Usu√°rio j√° existe (erro comum)
          if (createError.message.includes('already registered') || 
              createError.message.includes('already exists')) {
            skipped++
            if (skipped <= 5) {
              console.log(`‚è≠Ô∏è  Pulado (j√° existe): ${email}`)
            }
          } else {
            errors++
            console.error(`‚ùå Erro ao criar ${email}:`, createError.message)
          }
        } else {
          created++
          if (created % 10 === 0) {
            console.log(`‚úÖ Progresso: ${created}/${emailsToCreate.length} criados`)
          } else if (created <= 5) {
            console.log(`‚úÖ Criado: ${email}`)
          }
        }

        // Delay pequeno para n√£o sobrecarregar API
        if (i % 10 === 0) {
          await new Promise(resolve => setTimeout(resolve, 100))
        }

      } catch (error) {
        errors++
        console.error(`‚ùå Erro ao criar ${email}:`, error.message)
      }
    }

    // 5. Relat√≥rio final
    console.log('')
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
    console.log('‚úÖ Processo conclu√≠do!')
    console.log('üìä Resumo:')
    console.log(`   ‚úÖ Criados: ${created}`)
    console.log(`   ‚è≠Ô∏è  Pulados: ${skipped}`)
    console.log(`   ‚ùå Erros: ${errors}`)
    console.log(`   üîê Senha padr√£o: ${DEFAULT_PASSWORD}`)
    console.log('‚ö†Ô∏è  IMPORTANTE: Usu√°rios devem alterar senha!')
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')

    // 6. Listar primeiros 10 usu√°rios criados (para teste)
    console.log('')
    console.log('üìã Primeiros usu√°rios criados:')
    const sampleEmails = emailsToCreate.slice(0, 10)
    sampleEmails.forEach((email, i) => {
      console.log(`   ${i + 1}. ${email} - Senha: ${DEFAULT_PASSWORD}`)
    })

  } catch (error) {
    console.error('‚ùå Erro fatal:', error.message)
    process.exit(1)
  }
}

// ============================================================================
// EXECUTAR
// ============================================================================
if (require.main === module) {
  // Verificar vari√°veis de ambiente
  if (SUPABASE_URL === 'YOUR_SUPABASE_URL' || SUPABASE_SERVICE_ROLE_KEY === 'YOUR_SERVICE_ROLE_KEY') {
    console.error('‚ùå Erro: Configure as vari√°veis de ambiente:')
    console.error('   export SUPABASE_URL="sua-url"')
    console.error('   export SUPABASE_SERVICE_ROLE_KEY="sua-service-role-key"')
    console.error('')
    console.error('‚ö†Ô∏è  IMPORTANTE: Use a SERVICE ROLE KEY, n√£o a ANON KEY!')
    process.exit(1)
  }

  criarUsuariosDosCertificados()
    .then(() => {
      console.log('')
      console.log('‚úÖ Script finalizado com sucesso!')
      process.exit(0)
    })
    .catch(error => {
      console.error('‚ùå Erro ao executar script:', error)
      process.exit(1)
    })
}

module.exports = { criarUsuariosDosCertificados }

/**
 * ============================================================================
 * COMO USAR:
 * ============================================================================
 * 
 * 1. Instalar depend√™ncias:
 *    npm install @supabase/supabase-js
 * 
 * 2. Configurar vari√°veis de ambiente:
 *    export SUPABASE_URL="https://xxx.supabase.co"
 *    export SUPABASE_SERVICE_ROLE_KEY="sua-service-role-key"
 * 
 * 3. Executar:
 *    node criar_usuarios_auth_api.js
 * 
 * ============================================================================
 * ONDE ENCONTRAR SERVICE ROLE KEY:
 * ============================================================================
 * 
 * 1. Acesse seu projeto no Supabase Dashboard
 * 2. V√° em Settings > API
 * 3. Role at√© "Project API keys"
 * 4. Copie a "service_role" key (N√ÉO a anon/public key)
 * 
 * ‚ö†Ô∏è  ATEN√á√ÉO: A Service Role Key tem TODOS os privil√©gios!
 * Nunca commit esta key no git ou exponha no frontend!
 * 
 * ============================================================================
 */
